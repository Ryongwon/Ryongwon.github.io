{"meta":{"title":"龙渊","subtitle":"","description":"龙渊blog","author":"Ryongwon","url":"http://example.com","root":"/"},"pages":[{"title":"","date":"2023-11-16T11:52:15.235Z","updated":"2023-11-16T11:52:15.235Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"#人类 #BUPT #信通 #22级 #自动化所 2023.11- 中科院自动化所客座学生 没回消息就是死了"},{"title":"所有标签","date":"2022-11-07T06:45:26.643Z","updated":"2022-11-07T06:45:26.643Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2023-10-24T07:08:36.707Z","updated":"2023-10-24T07:08:36.707Z","comments":true,"path":"friends/index.html","permalink":"http://example.com/friends/index.html","excerpt":"斗强圣者竟然在我身边！神集排名不分先后","text":"斗强圣者竟然在我身边！神集排名不分先后 “学数分放松”sarlren神！ “这也不是很难吧”纯真神！ “站在你面前的是 AI rank1！”折木太郎神！ “软工之神在此 谁敢造次！”Jungle神！ “一气化三清 信通任我行”Mccrena神！ “扼杀过去的我”violet神！ “绩点原神高手”ntdzyy神！ “hacker未来之星”水果神！ “我跌”heye神！真的很神😭 “后端开发 但是软工大手子”九日神！ “摇滚现充树莓文青 老婆位”雾雨神！","author":"ryongwon"},{"title":"所有分类","date":"2022-11-07T06:45:10.038Z","updated":"2022-11-07T06:45:10.038Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"python学习笔记","slug":"python","date":"2023-05-14T16:04:31.000Z","updated":"2023-06-18T12:53:17.703Z","comments":true,"path":"2023/05/15/python/","link":"","permalink":"http://example.com/2023/05/15/python/","excerpt":"2023年5月15日00点06分速通了五章python的基础内容很简洁 没有冗杂的规矩 比较喜欢 2023年6月18日13点32分补充了 函数传参、文件、异常、面向对象编程部分","text":"2023年5月15日00点06分速通了五章python的基础内容很简洁 没有冗杂的规矩 比较喜欢 2023年6月18日13点32分补充了 函数传参、文件、异常、面向对象编程部分 # # Hello world # type_main =\"Hello world\" # print(type_main, type(type_main)) # # 第一章 基础内容 # # 一、数据类型的转换 # num1 = 233 # num1_float = float(num1) # print(type(num1), num1, float(num1), type(num1_float)) # num2 = 233.33 # num3 = 233.66 # print(int(num2), int(num3)) # # 二、标识符 # # 1.内容限定 # test_1标识符中文 = 1 # #只允许 中英文 数字 下划线 其中数字不能在首位 # # 2.大小写敏感 # Test_1标识符中文 = 2 # print(test_1标识符中文, Test_1标识符中文) # # 3.关键词限制 # # 三、运算符 # # 加减乘除+-*/ # # 整除 取余 指数 # print(\"整除 10//3=\", 10//3) # print(\"取余 10%3=\", 10%3) # print(\"指数 10**3=\", 10**3) # # 复合赋值运算符 # # 加减乘除、整除、取余、指数运算符 # # a &amp;= b == a = a &amp; b # a = 3 # b = 1 # a += 1 # b -= 1 # print(\"加法赋值运算符a += b=\", a) # print(\"减法赋值运算符b -= 1:\", b) # # 四、字符串的拓展 # # 字符串定义： 单、双、三引号定义 单双间可相互单层嵌套 # morning = '早上好' # noon = \"中午好\" # night = \"\"\" 晚 # 上 # 好\"\"\" # # 转义字符\\ ：把后面符号转换成普通字符 # # goodnight1 = \" \" 晚安 \" # goodnight1 = \" \\\"晚安 \" # # 字符串的拼接 +只能用字符串拼接 # print(\"如果我再也见不到你 祝你\"+morning +noon +goodnight1) # # 字符串格式化 # # 任何字面量都可以转化成字符串 # # %占位符号 s(string)将变量转化成字符放入占位位置 # # 格式化的作用：因为字符串的拼接只能用+ 而通过占位的格式化拼接更加简洁方便 # 早午饭 = \"brunch\" # 晚饭 = \"dinner\" # print(\"早饭过了 准备吃 %s\" % 早午饭) # # 多个占位 # print(\"早饭过了 准备吃 %s 之后吃 %s \" % (早午饭,晚饭)) # # 多种数据类型的占位 常用的 # # %s字符型 %d整型 %f浮点型 # 钱包 = \"Pouch\" # cost = 10 # balance = 0.1 # print(\"今天花了 %d %s 还剩 %f 元\" % (cost,钱包,balance)) # # 精度/宽度控制 % m.n s/d/f形式 string/decimal/float # # 多用于数字控制 对于字符串也有宽度控制作用 # # 可以没有m整数部分 当m小于数字或字符串（应该也包括）整体时会被忽略 # print(\"今天花了 %3.2d %s 还剩 %3.2f 元\" % (cost,钱包,balance) ) # # 字符串的快速格式化fornat\"{ }\" 不限数据类型 不做精度限制 就放变量 # print(f\"今天花了 {cost} {钱包} 还剩 {balance} 元\" ) # # 表达式也可以被格式化 # # 股价计算显示 # name = \"明渊计划\" # stock_price = 5.01 # stock_code = \"010043\" # stock_price_daily_gorwth_factor = 2.7 # growth_days = 7 # print(f\"公司：{name}，股票代码：{stock_code}，当前股价：{stock_price}\" ) # print(\"每日增长系数：%.1f，经过%d天增长后，股价达到了：%.2f\" % (stock_price_daily_gorwth_factor,growth_days,stock_price+stock_price_daily_gorwth_factor*growth_days)) # # 五、数据输入 # # input的使用 # print(\"您是？\") # use_name = input(\"请在下方写上你的名字\") # use_type = \"svip\" # print(f\"您好啊{use_name}，您是{use_type},欢迎您\") # # 第二章 基础语法 # # 一、布尔类型和比较运算符 # # 布尔类型的实质是由数字01形成的假真值 所以布尔类型也是数字型的一种 # # 比较运算符就是做比较 我感觉像是就是判断对错 True就返回1 False就返回0 # # 比较运算符：==、!=、&gt;、&lt;、&gt;=、&lt;= # bool1 = True # bool2 = False # print(\"bool1的数据类型为 %s,bool2的数据类型为 %s\" %(type(bool1),type(bool2))) # print(\"bool1 == bool2的结果为 %d\" % (bool1==bool2)) # # 二、if判断语句 # # 要点：冒号与缩进 # if bool1 == bool2: # print(\"bool1等于bool2\") # if bool1 != bool2: # print(\"bool1不等于bool2\") # # 练习 成年人判断 # age = int(input(\"请输入您的年龄\")) # if age &gt;= 18: # print(\"您已成年，游玩需要补票10元。\") # print(\"祝您游玩愉快\") # # 要点：如果不加int()的类型转换 则age默认为string型 会报错 # 三、if-else # age = int(input(\"请输入您的年龄\")) # if age &gt;= 18: # print(\"您已成年，游玩需要补票10元。\") # else: # print(\"您尚未成年，可以进入游乐园啦\") # print(\"祝您游玩愉快\") # # 练习 购票要求 # print(\"欢迎来到游乐园\") # fare = 10 # height_restirictions = 120 # height = int(input(\"请输入您的身高(cm):\")) # if height &gt; 120: # print(f\"您的身高已超过{height_restirictions}cm，游玩需要购票{fare}\") # if-elif-else # elif height &gt; 0: # print(f\"您的身高未超出{height_restirictions}cm，可以免费游玩\") # else: # print(\"您是雅利安超人吗...\") # # if判断主打的就是一个互斥 先行满足后续不会被执行 # # python支持在代码编写中直接使用输入变量 不用提前定义 # # if int(input(\"请输入您的身高(cm):\")) &gt; 120: # # print(f\"您的身高已超过{height_restirictions}cm，游玩需要购票{fare}\") # # 四、判断条件的嵌套使用 # vip_level = int(input(\"请问您的vip等级为：\")) # if vip_level&gt;3: # print(\"您在开玩笑吗...？\") # elif vip_level &gt;0: # print(\"您好亲爱的vip用户\") # if vip_level &gt;=2: # print(f\"您是尊贵的vip{vip_level}用户，此次门票免费\") # elif vip_level == 1: # print(f\"您是尊贵的vip{vip_level}用户,此次门票可以享受5折优惠\") # else: # print(\"请不要开玩笑了\") # # 练习 猜数字 完全可以用循环做... # import random # random_num =random.randint(1,10) # print(\"在1-10中随机生成了一个数字，您有三次猜数字的机会\") # guess_num1 = int(input(\"您觉得这个数字是多少：\")) # if guess_num1 == random_num: # print(\"您猜的数字就是随机数！牛哇\") # else: # if guess_num1 &lt; random_num: # print(\"您猜的数字小于随机数了\") # else: # print(\"您猜的数字大于随机数了\") # guess_num2 = int(input(\"您觉得这个数字是多少：\")) # if guess_num2 == random_num: # print(\"您猜的数字就是随机数！牛哇\") # else: # if guess_num2 &lt; random_num: # print(\"您猜的数字小于随机数了\") # else: # print(\"您猜的数字大于随机数了\") # guess_num3 = int(input(\"您觉得这个数字是多少：\")) # if guess_num3 == random_num: # print(\"您猜的数字就是随机数！牛哇\") # elif guess_num3 &lt; random_num: # print(\"您猜的数字小于随机数了\") # else: # print(\"您猜的数字大于随机数了\") # # 五、循环 # # 避免死循环 # # 将刚才的猜数字用while循环做 # import random # random_num =random.randint(1,10) # i = 0 # guess_num1 =0 # print(\"在1-10中随机生成了一个数字，您有三次猜数字的机会\") # while i &lt; 3: # guess_num1 = int(input(\"您觉得这个数字是多少：\")) # if guess_num1 == random_num: # print(\"您猜的数字就是随机数！牛哇\") # break # elif guess_num1 &lt; random_num: # print(\"您猜的数字小于随机数了\") # elif guess_num1 &gt; random_num: # print(\"您猜的数字大于随机数了\") # i += 1 # # 练习 一到一百的和 # i = 1 # sum = 0 # while i &lt;= 100: # sum += i # i += 1 # print(f\"1-100的和为{sum}\") # # tips1：制表符\\t == tab键 # # tips2 print不换行使用print(\"\",end='') # #打印金字塔型九九乘法表 # # 错误案例 # i = 1 # 行 # j = 1 # 列 # while i &lt;= 9: # while j &lt;= i: # print(f\"{j}*{i}={i*j}\\t\",end='') # j += 1 # i += 1 # print() # # 分析：九九乘法表有两套循环 行循环和纵循环 # # 上述这种情况事先定义j 但是忽略了每一行要重新从j=1开始 # # 而这就是与正确的操作唯一的区别 # # 可以事先定义 但是要记得调用 # # 问题：应该是分析的不好 无法有效的想出两个循环应该怎么嵌套 # # 正确案例 # i = 1 # 行 # while i &lt;= 9: # j = 1 # 列 # while j &lt;= i: # print(f\"{j}*{i}={i*j}\\t\",end='') # j += 1 # i += 1 # print() # # 要点：双循环 \\t对其 end='' # # 每行都要从1开始打 # # 每列都要逐渐增加 # # 理不清时可以写一下一个一个的输入输出结果 # # 六、for循环 # # for 临时变量 in 待处理数据集： # # 确定有限的循环适用 # name = \"Ryongwon\" # for x in name: # print(x) # # 无法控制循环条件 循环次数取决于待处理集 # # 练习 字符计数器 # i = 0 # sentence = \"itheima is a brand of itcast\" # letter = input(\"请属于您要计数的字符\\r\\n\") # print () # for x in sentence: # if x == letter: # i += 1 # print(f\"{sentence}中共含有：{i}个字符{letter}\") # # 换行输入\\r\\n \\r为回车符 \\n为换行符 # # 转义字符 # # \\ 续行符 到下一行显示 # # \\' \\\" 之前讲过的转义 # # \\0 空一下 \\n \\r 刚才提到了 # # \\t 之前也说过 相当于tab # # \\a 响铃？ 不太懂 # # \\b 退格backspa # # \\\\ 反斜线 # # 七、range语句 # # for循环的本质是相当于遍历序列类型 # # 数字序列range是一种简单的序列类型 # for x in range(5): # print(x) # for x in range(1,10): # print(x,end=\"\") # print() # for x in range(1,10,2): # print(x,end=\"\") # # range(num)的包含的区间为[0,num) # # 如果num = 0则不显示 # # range(num1,num2)的包含的区间为[num1,num2) # # 相当于上面的左端点可变 # # range(num1,num2,step)的包含的区间为[num1,num1+step,num1+2*step,) # # 八、临时变量作用域 # # 可以在for循环外访问到临时变量 但是不建议 # for x in range(5): # x += 1 # print(x) # # for循环的嵌套语句 # # ep：for循环输出九九乘法表 # for i in range(1,10): # for j in range(1,i+1): # if j &lt;= i: # print(f\"{j}*{i}={i * j}\\t\",end='') # print() # # 还是没有理清乘法表的本质 # # 1*1=1 i*j=ij # # 2*1=2 2*2=4 (i+1)*j=ij+j (i+1)*(j+1)=ij+i+j+1 # # ↑里层循环打印一行内容 到了第二行是列+1开始做 # # 九、for循环的continue与break # for i in range(1,10): # for j in range(1,i+1): # if j &lt;= i: # print(f\"{j}*{i}={i * j}\\t\",end='') # continue # print() # break # # 练习：发工资 # import random # balance = 10000 # for i in range(1,21): # # print(f\"钱包里有{balance}\") # gpa = random.randint(1,10) # if balance == 0: # print(\"本阶段工资发放完毕\") # break # if gpa &lt; 5: # print(f\"员工{i}，绩效分{gpa},低于5，不发工资，下一位\") # continue # else: # balance -= 1000 # print(f\"向员工{i}发放工资1000元，账户余额还剩{balance}元\") # # 第三章 函数 # # 一、函数的定义 # # 练习 统计字符串的长度 # # 不使用 len() # def sentence_count(sentence): # i = 0 # for x in sentence: # i += 1 # print(f\"您输入的字符串字数为{i}\") # sentence_name = input(\"请输入需要计算长度的字符串\\r\\n\") # sentence_count(sentence_name) # #def 函数名(传入参数): # # 函数体 # # return 返回值 # # 返回值与参数 可以省略 同C语言 # # 练习 调用 # def Hesuan(data): # print(\"你好\") # data1 = \"\" # Hesuan(data1) # # 二、函数的参数 # # 传入参数的定义 # # data201，data102为形参 # # data1，data2为实参 # # 练习 数字的计算 # # 传入被计算的两个数字 # # 返回值的使用 # # 函数的默认值 # def count(data201,data102): # print(f\"{data1} + {data2} = {data1 + data2}\") # return 0 # data1 = int(input(\"\")) # data2 = int(input(\"\")) # count(data1,data2) # def add(a,b): # result = a + b # return result # add(data1,data2) # print(f\"{add(data1,data2)}\") # # 三、返回值中的None类型 # # None值代表空、没有 与0作区别 # def check(data1,data2): # if data1 == data2: # return 1 # else: # return None # data1 = int(input()) # data2 = int(input()) # print(check(data1,data2)) # # 四、函数的说明文档形式 # # 函数作用 # # ：param x：参数x的说明 # # ：param y：参数y的说明 # # ：return：返回值说明 # # 五、函数的嵌套调用 # def func_2(): # print(\"我是2\") # def func_13(): # print(\"我是1\") # func_2() # print(\"我是3\") # func_13() # # 六、函数的局部变量与全局变量 # # 函数内部的变量为局部变量 # # 函数内外部都能用的变量为全局变量 # # 局部变量可以通过global转化为全局变量 # num1 = 100 # def funum_1(): # global num1 # 定义num1为全局变量 # num1 = 1000 # print(num1) # def funum_2(): # global num2 # num2 = 2000 # print(num2) # def funum_3(): # num3 = 3000 # print(num3) # funum_1() # funum_2() # funum_3() # print(num1) # print(num2) # # print(num3) # # 七、函数的综合使用 # # 练习 ATM系统 # money = 5000000 # ATMin = 0 # ATMout = 0 # name = input(\"请输入您的姓名\\r\\n\") # def ATM_balance(): # print(f\"亲爱的{name},您的余额为：{money}元\\r\\n\") # ATM_main() # def ATM_in(): # global money # ATM_in = int(input(\"请输入您要存款的金额\\r\\n\")) # money = money + ATM_in # ATM_balance() # ATM_main() # def ATM_out(): # ATMout = int(input(\"请输入您要取款的金额\\r\\n\")) # global money # if ATMout &lt;= money: # money = money - ATMout # ATM_balance() # ATM_main() # else: # print(\"您的余额不足 无法取出\\r\\n\") # ATM_main # def ATM_main(): # print(\"欢迎使用ATM系统\\r\\n扣1查询余额\\r\\n扣2存款\\r\\n扣3取款\\r\\n扣4退出\") # swtich = int(input()) # if swtich == 1: # ATM_balance() # return # elif swtich == 2: # ATM_in() # return # elif swtich == 3: # ATM_out() # return # else: # quit() # ATM_main() # # 第四章 数据容器 # # 一、数据容器的定义 # # 存储数据的变量集合 # # 批量的存储与使用数据 # # 根据不同的特点对应有不同的数据容器 # # 数据容器大致有：列表、元组、字符串、集合、字典这五类 # # 区别：1.是否支持重复元素 2.是否可修改 3.是否有序 等 # # 二、列表 # # 列表存储类型不受限制 可以嵌套列表 # data1 = 0 # data2 = 1 # list1 = [data1,data2] # list2 = [list1,[1,2],[3,4],[5,6]] # print(type(list1),type(list2)) # # 列表的下标索引 # # 正向索引与反向索引 # # 正向索引从0开始 # # 反向索引从-1开始 # # 注意索引的取值范围 # # 嵌套列表的索引 # print(list1[1],list2[-4][0]) # 正向索引 反向索引的嵌套列表索引 # # 列表的常用操作 # # 插入、删除、清空、修改、统计等 # # 列表的操作是通过'方法'实现的 # # 方法 # # 与函数类似 若将函数定义为class(类)的成员 则称该函数为方法 # class Student: # def add(self,num1,num2): # return num1 + num2 # add = Student() # add001 = add.add(1,2) # print(add001) # # 查询元素 # list1.index(1) # print(list2.index([1,2])) # #修改元素 # list1[0] = 2 # print(list1.index(2)) # # 插入元素 # list1.insert(1,999) # print(list1.index(999)) # print(list1) # # 追加元素 # list1.append(456456) # print(list1) # # 追加数据容器(一批元素) # list1.extend(list2) # print(list1) # # 删除元素 # # 1. del 下标 # del list1[4] # print(list1) # # 2.列表.pop(下标) 取出并移除该元素 # list1.pop(1) # print('12121',list1) # # 3.删除第一个出现的元素 # # 列表.remove() # list1.remove(2) # print(list1) # # 清空列表 # # 列表.clear() # list1.clear() # print(list1) # # 统计某个元素数量 # # 列表.count() # list1.count(1) # print(f\"列表里有{list1.count(1)}个1\") # # 统计列表的全部元素 # # len(列表) # len(list1) # print(len(list1)) # # 练习 # list_test = [21,25,21,23,22,20] # # list_test.append(31) # # list_new = [29,33,30] # # list_test.extend(list_new) # # print(list_test) # # num1 = list_test[0] # # print(num1) # # list_test.pop(0) # # print(list_test) # # num0 = list_test[-1] # # print(num0) # # list_test.pop(8) # # print(list_test) # # list_test.index(31) # # print(list_test) # # print(list_test.index(31)) # # 通过循环遍历列表 # # while循环 # i = 0 # while i &lt; len(list_test): # print(f\"{list_test[i]} \",end='', ) # i += 1 # print() # # for循环遍历 # for i in list_test: # print(f\"{i} \",end='', ) # i += 1 # print() # print(list_test) # # 练习 取出列表的偶数 # num1 = [1,2,3,4,5,6,7,8,9,10] # num2 = [] # i = 0 # for i in num1: # if i % 2 == 0: # num2.append(i) # else: # continue # print(num2) # num2.clear() # i = 0 # print(i) # while i &lt; len(num1): # if num1[i] % 2 == 0: # num2.append(num1[i]) # i += 1 # else: # i +=1 # print(num2) # # 练习中有两个要点 判断偶数与添加元素 # # while循环中i为下标 通过num1[i]来获取元素值 # # 而for循环i即为元素值 # # while循环中没有continue关键词 所以依然要用i += 1避免死循环 # # 千万别忘了临时变量的变化 # # 三、元组 # # 元组的特点 不可以被修改数据 # # \"只读状态的list\" # a = tuple() # 面向对象类型 # b =(\"我爱你\",\"I love u\") # # tuple只有一个元素时要加， belike # c = ('suki',) # print(a,b,c) # print(type(a),type(b),type(c)) # # 下标索引同理 # print(b[1],c[0]) # # 元组的常见操作与方法 # # 因为元组不可修改 所以元组只能使用index() count()与len() # print(b.index(\"I love u\")) # print(b.count(\"I love u\")) # print(len(c)) # # 元组的遍历 # i = 0 # while i &lt; len(c): # print(c[i]) # i +=1 # for i in c: # print(i) # # 练习 元组的基本操作 # tuple_test = ('周杰伦',11,['foorball','music']) # print(tuple_test.index(11)) # print(tuple_test[0]) # del tuple_test[2][0] # tuple_test[2][0] = \"coding\" # print(tuple_test) # # 四、字符串 # # 字符串是只存储字符的数据容器 # # 解释了为什么之前while、for循环练习能够遍历字符串每一位字符 # # 同样 字符串无法修改 # str1 = \"Hello\" # str2 = \"hi my luv.\" # print(str1,str2) # print(str1[0],str2[0]) # str1.index(\"Hello\") # print(str1.index(\"Hello\")) # # replace 替换 # # 创造一个新变量去获得替换后的变量 # str2 = str1.replace(\"Hello\",\"hi luv.\") # print(str2) # # # split 字符串的分割 # str1 = str2.split() # print(str1,type(str1)) # # strip 去除最前最后的指定字符 # # 拥有默认值 空格 # str1 = str2.strip() # print(str1,str2) # print(str2.strip(\"hi\")) # # count() 计算某个字符数量 # print(str1.count('h')) # # len() 计算全部字符元素数量 # print(len(str1)) # # 练习 分割字符串 # sentence = \"itheima itcast boxuegu\" # print(f\"句子中有{sentence.count('it')}个it\") # new_sentence = sentence.replace(\" \",\"|\") # print(new_sentence) # print(sentence.split(\"|\")) # # 五、序列及学列的切片操作 # # 序列是指内容连续、有序、可使用下标索引的容器 # # 列表、元组、字符串都是序列的一种 # # 序列[起始下标:结束下标:步长] # # 语法类似于range # list1 = [0,1,2,3,4,5,6,7,8,9] # print(list1[0:4:2]) # tuple1 = (0,1,2,3,4,5,6,7,8,9) # print(tuple1[9:5:-2]) # str1 = \"0123456789\" # print(str1[::2]) # # 练习 序列的切片 # str2 = \"你是年少的欢喜\" # print(str2.index(\"年少的欢喜\")) # print(str2[6:2:-1]) # print(str2[::-1]) # # 六、集合 set # # {} # # 变量 = set() # set1 = {\"hello\",\"luv.\",\"lover\",\"hi\",\"luv.\"} # print(set1,type(set1)) # # 因为集合无序 所以不支持下标索引访问 # # 但支持修改数据元素 # # ---------------------------------- # # set数据容器的修改 # # 添加元素 .add() # set1.add(\"HELLO\") # print(set1) # # 移除元素 .remove() # set1.remove(\"hello\") # print(set1) # # 取出元素 .pop() # # 因为无序导致不能通过下标取出固定的元素 # # 只能随机取出一个元素 # set1.pop() # print(set1) # # 清空元素 .clear() # # set清空 # set1.clear() # print(set1) # # 集合取差 .difference # # 原set不变 # # 找出两个集合交集的某一个集合的补集 # # 就是某个集合去除公共部分的剩下的部分 # set2 = {1,2,3} # set3 = {3,4,5} # set4 = set3.difference(set2) # # 找出set3中与set2不同的部分 # print(set4) # # 消除差集 .difference_update() # # 原set改变 # set3.difference_update(set2) # print(set3) # # 消除交集我觉得应该叫... # # ---------------------------- # # 合并集合 .union() # # 原set不变 新变量 # set4 = set3.union(set2) # print(set4) # # 元素个数 经典老朋友 len(set) # # 不想写了这个了 懂的都懂 # # 遍历 # # 因为set集合无序没有下标 # # 所以不支持while循环通过下标遍历 # # 但是可以通过for循环对每个变量显示遍历 # for i in set4: # print(i) # i += 1 # # 练习 信息去重 # my_list = ['哈哈了','龙渊本渊','哈哈了','龙渊本渊','ryongwon','zhong','ryongwon'] # i = 0 # s1 = set() # while i &lt; len(my_list): # s1.add(my_list[i]) # i += 1 # print(s1) # # 七、字典 # # 现实中字典 通过[字]找到[含义] # # python中字典 通过[key]找到[value] # # 通过键找到某个值 感觉像映射 # # key不可重复 # dict1 = {1:\"Yi\",2:\"Er\"} # print(dict1,type(dict1)) # # 空字典定义 # dict_noen = dict() # # 通过key找到value # # 类似下标索引 # print(dict1[1]) # # 字典的嵌套使用 # # 随便嵌套 但是key不能为字典 # dict2 = {\"成绩\":{\"语文\":150,\"数学\":150,\"英语\":150,\"物理\":100,\"化学\":100,\"生物\":100,\"政治\":100,\"历史\":100,\"地理\":100}} # print(dict2[\"成绩\"][\"语文\"]) # # 字典的常用操作 # # 新增/更新元素 # dict1[\"3\"] = \"San\" # print(dict1) # # 若key存在 # dict1[\"3\"] = \"三\" # print(dict1) # # 删除元素 # dict1.pop(\"3\") # print(dict1) # # 清空元素 # dict1.clear() # print(dict1) # # 获得全部的key # print(dict2.keys()) # # 遍历字典 # # 嵌套的遍历 # for key in dict2[\"成绩\"].keys(): # print(key,dict2[\"成绩\"][key]) # for key in dict2[\"成绩\"]: # print(key,dict2[\"成绩\"][key]) # # 全部元素数量 # # len() # # 练习 升职加薪 # dict3 = {\"青冥\":{\"部门\":\"科技部\",\"工资\":3000,\"级别\":1},\"浩荡\":{\"部门\":\"市场部\",\"工资\":5000,\"级别\":2},\"不见底\":{\"部门\":\"市场部\",\"工资\":7000,\"级别\":3},\"日月\":{\"部门\":\"科技部\",\"工资\":4000,\"级别\":1},\"照耀\":{\"部门\":\"市场部\",\"工资\":6000,\"级别\":2}} # for key in dict3: # if dict3[key][\"级别\"] == 1: # dict3[key][\"工资\"] = dict3[key][\"工资\"] + 1000 # else: # continue # print(dict3) # # 八、数据容器的通用操作 # list_t = [2,3,4,1,5] # tuple_t = (2,3,4,1,5) # str_t = '23415' # set_t = {2,3,4,1,5} # # max/min{} 找到最大/最小元素 # print(max(list_t)) # print(min(list_t)) # # 类型转换 # # 容器类型() # # 不能转化为字典类型 # set(list_t) # print(list_t) # # 通用排序操作 # # sorted(序列,reverse=Ture) # # 字符串通过ASCII码排序 # print(sorted(list_t)) # print(sorted((list_t),reverse=True)) # # 第五章 函数返回值与参数 # # 一、函数的多返回值 # def Return(): # return 1,\"luv\" # x,y = Return() # print(x,y) # # 二、函数的默认参数 # # 位置传参 与 默认参数 # def power(x,n=2): #幂函数的计算 n有默认参数2 # P = x # i = 1 # while i &lt; n: # P = P*x # i += 1 # return(P) # print(power(2,4)) # print(power(1)) # # 关键字参数 # print(power(x = 2,n = 4)) #key-vulue形式 2的四次方 # # 缺省参数/默认参数 # print(power(x =1)) # 1的平方 # # 不定长参数 # # 本质上是没有参数的限制，理论上可以拥有无数个参数 # def sayHi(*args): # print(f\"你好,你输入了{args},在Python中这些数据的储存类型是{type(args)}\") # def sayHello(**kwargs): # print(f\"你好,你输入了{kwargs},在Python中这些数据的储存类型是{type(kwargs)}\") # sayHi(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\") # sayHello(a='啊对对对',b='不对不对不对',c='carry') # # 三、匿名函数 # # 函数作为参数传递 # def numbers(power): # 默认参：计算2和1的平方 # numbers = (power(2,1)) # return numbers # print(numbers(power)) # # 函数作为一种代码的执行逻辑进行传入 # # 在函数调用过程中实质上是数据的传入 # # lambda匿名函数 # result = lambda x = 1,y = 1: x + y # # 右边是lambda的语法 # # lambda作为一行临时函数 多应用于节省储存场景 # print(result) # print(f\"numbers(result)的结果为{numbers(result)}\" ) # # 第六章 文件 # # 一、编码 # # 编码是计算机翻译文件字符的一种方式 计算机只能储存01数据 # # 字符通过编码翻译成01形式存储在计算机中 使用时通过编码将01形式翻译回来 # # 常见的编码形式有UTF-8、simpleChinese等 # # 编码形式不对就会出现锟斤拷的情况 # # 二、文件的读取 # # 打开/创建文件 # filePoem = open('C:/Users/MECHREVO/Desktop/Poem.txt','r',encoding='UTF-8') # # open(\"name\",\"mode\",encoding=\"\") # # name可以是文件地址(相对或绝对)也可以是创建的新文件名 # # 但是r模式是无法读取不存在的文件的 也不会创建 # # !!!注意 复制文件地址的反斜杠\\要换成斜杠/ # # mode有r只读、w写入、a追加写入 # # encoding是编码形式 # # 读取文件 # # files.read() 读取整个文件 (默认参) 默认参数为all整个文本 # print(filePoem.read(10)) # print(filePoem.read(7)) # # .read会连续的读取 在读取时会继续而不是从头 # # 当读取完整个文件时 后续.read将没有内容 # # files.readlines() 读取一行数据 (默认参) 默认参为后续所有行 # print(filePoem.readlines(1)) # # .readlines也会继续在.read后继续 # # files.readline() 一次读取一行数据 (默认参) 默认参为一行的所有字符 # print(filePoem.readline()) # line = 0 # for line in filePoem: # print(filePoem.readline()) # # 关闭文件 # # files.close() 记得及时关闭 不然会一直占用文件 # filePoem.close() # # with open(name,mode,encoding) as files 粗心福音 自动关闭 # with open('C:/Users/MECHREVO/Desktop/Poem.txt','r',encoding='UTF-8') as filePoem: # for line in filePoem: # print(filePoem.readline()) # # 练习：计数 # with open('C:/Users/MECHREVO/Desktop/Poem.txt','r',encoding='UTF-8') as filePoem: # Poemtxt = filePoem.read() # count = Poemtxt.count('我') # print(count) # # 二、文件的写入 # # 写入文件 # with open ('C:/Users/MECHREVO/Desktop/PythonTxT.txt','w',encoding='UTF-8') as PythonTxT: # # 作用：在桌面创建PythonTxT.txt文件 w写入模式 编码UTF-8 # # 在写入文件时文件不存在会创建文件，文件存在则会清空文件重新写入 而不是继续 # PythonTxT.write(\"你好 这里是明渊科技\") # # write写入在内存中 在停止后不会存储在磁盘中 # PythonTxT.flush() # # flush写入进磁盘 尽量多次写入 一次刷新 避免效率降低 # # .close是自带flush刷新写入进磁盘的 有.close时就可以不用写flush了 # # 文件追加写入 只需将w模式改为a模式 剩下内容与w模式一样 # with open('C:/Users/MECHREVO/Desktop/Poem.txt','a',encoding='UTF-8') as filePoem: # filePoem.write(\"\\n我爱你\") # # 练习：账单备份 先不写了 # # 第七章 异常 # # 一、异常 # # 捕获全部异常 # try: # a = 1 # except: # 捕获全部的异常 # print(\"出现异常了 好似\") # else: # print(\"没有异常 好耶\") # try: # b = 0 # except Exception as Allerror: # print(\"出现异常了 好似\") # # 捕获某个异常 # try: # print(Name) # except NameError as NAMEe: # print(\"出现变量没定义的异常了 nb\") # # 捕获多个异常 # try: # except (NameError,ZeroDivisionError): # print(\"出现变量没定义或除零异常了 逆天\") # 第八章 面向对象编程 # 一、对象的基本操作 # 设计类 # 设计一个表格 表格记录着要记录的某些内容 class Student: name = None gender = None age = None # 创建对象 stu1 = Student() # 对象赋值 stu1.name = '龙渊' stu1.gender = '我不到啊' stu1.age = 18 print(stu1.name) print(stu1.gender) print(stu1.age) # 二、类的成员方法 # 类的定义与使用 # 例：一 # 类的行为/方法 # 其实就是指类内部的函数 class Game: name = None def PutName(self): print(f\"游戏名为:{self.name}\") game1 = Game() game1.name = '明日之花' game1.PutName() # 三、类和对象 # 面向对象编程 即 通过设计对象与行为进行编程 # 抽象的将世界上的所有个体物体总结为某些特点的对象 # 通过属性描述对象 # 通过方法描述对象的行为 # 构造方法/函数 class table: name = None age = None tel = None def __init__(self,name,age,tel): # __init__会自动执行一遍 self.name = name # init既能做到自动执行 也能创建类中没有的变量 self.age = age self.tel = tel def __str__(self) -&gt; str: return f\"表中名字为{self.name},年龄为{self.age},电话为{self.tel}\" # def __lt__(self,other): table1 = table('(｡･∀･)ﾉﾞ嗨',15,'114514') print(table1.name) # 魔术方法 # 其余的内置方法 # __str__ 字符串方法 # __gt、lt、ge、le__ 比较方法 大于、小于、大于等于、小于等于 # 四、封装 # 有些事物不会对外部告知 但是自身会需要用 # 如人心理健康、感情需求 一般是不会告知外界的 # 但人需要使用这些东西来进行一些行为 # 如因为心理不健康所以要看医生 # 这些不对外公开的东西在类中被称为私有成员 # 在外界的对象中是无法使用的 # 在内部方法的调用可以使用 class Phone: name = None __IMEI = 1 def __putIMEI(self): print(f\"IMEI\") def nice(self): if self.__IMEI != None: print(\"nice\") # 五、继承 # 更新换代吧大概 # 单继承 class NewGame(Game): id = None def idCall(self): print(f\"你的游戏是{self.name}你的游戏序号是{self.id}\") # 多继承 # 抄别人的加到我身上 更新换代把别人家的也拿过来 class MyGame(NewGame,table1): pass # 复写父类 # 调用父类 super(). # 六、多态","categories":[],"tags":[],"author":"ryongwon"},{"title":"数据结构与算法笔记","slug":"dsc","date":"2023-03-09T09:09:26.000Z","updated":"2023-03-22T16:16:09.474Z","comments":true,"path":"2023/03/09/dsc/","link":"","permalink":"http://example.com/2023/03/09/dsc/","excerpt":"教学视频是清华大学邓俊辉数据结构与算法浙江大学数据结构 陈越注意：信通院的计算机基础只有数据结构与算法导论 并非数据结构与算法 注意甄别在学习前 确保熟练掌握C/C++、Python、Java等某一主流语言使用或学习能力该笔记以C++为例才不是只学了C++结合徐雅静老师主编的《数据结构与算法》与邓俊辉老师主编的《数据结构》","text":"教学视频是清华大学邓俊辉数据结构与算法浙江大学数据结构 陈越注意：信通院的计算机基础只有数据结构与算法导论 并非数据结构与算法 注意甄别在学习前 确保熟练掌握C/C++、Python、Java等某一主流语言使用或学习能力该笔记以C++为例才不是只学了C++结合徐雅静老师主编的《数据结构与算法》与邓俊辉老师主编的《数据结构》 前言：为什么要学习数据结构和算法？引用runoob的一句话 随着应用程序变得越来越复杂和数据越来越丰富，几百万、几十亿甚至几百亿的数据就会出现，而对这么大对数据进行搜索、插入或者排序等的操作就越来越慢，数据结构就是用来解决这些问题的。 想象一所图书馆，无数的新书（数据）入馆，如何合理摆放（数据存储），同时需要和旧书（旧数据）一起陈列（优化数据结构），读者（计算机、用户）如何更快更方便的查找需要的书籍。老破旧损的书籍怎么处理。将它抽象化，就是数据结构和算法这门课程所教的知识。 但其实我觉得学校排的课有点不太合理，我个人更喜欢先学数据结构再去实践C语言编程。不过按刘老师的意思大概是先去知道这玩意操作起来是什么效果再去理解背后的原理。whatever，这门课程多又杂，笔记纯属是辅助我个人理解的，如有错误，请务必指出！！谢谢！！ 鸽了一阵 今天补一下 零、导论4节2.2 静态单链表1 一、绪论概念引入数据是信息的载体，能够被计算机识别、存储和加工处理。分为数值数据与非数值型数据。 数据元素是数据的基本单位。 数据项（字段、域）是构成数据元素的不可分割的最小单位。每个数据元素可以包含多个不同的数据项，每个数据项具有独立的含义。 数据类型是具有相同性质的计算机数据的集合以及在这个数据集合上的一组操作。数据类型可以分为简单类型(或称为原子类型)和构造类型（或称为结构类型）。例如C++中int、float、double等。 数据结构是指按照某种逻辑关系组织起来的一组数据,按一定的存储方式存储在计算机的存储器中，并在这些数据上定义了一组运算的集合。其中，数据结构包含以下三个方面： 数据元素之间的逻辑关系,也称为数据的逻辑结构。 数据元素及其关系在计算机存储器内的存储形式,称为数据的存储结构或物理结构。 对数据的操作或运算。 解释说明：数据元素存储在数据域中，数据类型是给数据分类，数据结构是阐释数据是如何摆放查找的的。 常见的逻辑结构有4 种，分别是集合、线性结构、树和图。 通过计算模型按照某种算法规律的进行过程称为计算 邓给出这样一个例子：欧几里得的尺规作图将线段三等分 过A作任意射线ρ，在ρ上取一点D，用圆规取AC’=C’D’=D’B’，连接B’B，过D’、C’作BB’的平行线，交AB于点C、D。此时AC=CD=DB。 将该过程描述成算法形式，即： 12345678tripartition(AB)输入：线段AB输出：将AB三等分的两个点C和D从A发出一条与AB不重合的射线ρ任取上三点C'、D'和B'，使|AC'| = |C'D'| = |D'B'|连接B'B过D'做B'B的平行线，交AB于D过C'做B'B的平行线，交AB于C 个人理解这个过程为 线段→尺规作图→三等分点。而尺规作图这个环节就是计算机计算的过程。作图步骤与规则即为算法。 在此给出算法定义：算法是指基于特定的计算模型，旨在解决某一信息处理问题而设计的一个指令序列。 算法具有 输入/输出 正确性 确定性 可行性 有穷性 其中有穷性是判别程序与算法的重要性质 算法的评价：正确（符合语法 支持简单、大量、一般性、合法的输入） 鲁棒（对非法输入辨别处理） 可读（结构化 注释） 效率（快 好） 例：冒泡算法（邓数据结构） 1234567891011121314void bubblesort1A(int A[], int n) { //冒泡排序算法：0 ≤ nbool sorted = false; //整体排序标志，首先假定尚未排序 while (!sorted) { //在尚未确定已全局排序之前，逐趟进行扫描交换 sorted = true; //假定已经排序 for (int i = 1; i &lt; n; i++) { //自左向右逐对检查当前范围A[0, n)内的各相邻元素 if (A[i - 1] &gt; A[i]) { //一旦A[i - 1]与A[i]逆序，则 swap(A[i - 1], A[i]); //交换 sorted = false; //因整体排序不能保证，需要清除排序标志 } } n--; //至此末元素必然就位，故可以缩短待排序序列的有效长度 }} //借助布尔型标志位sorted，可及时提前退出，而不致总是蛮力地做n - 1趟扫描交换 最好时间复杂度：T(n)=Ω(g(n))//增速下界最坏时间复杂度：T(n)=O(f(n))//增速上界平均时间复杂度：T(n)=Σnp//数学期望 一般来说最坏已经够用了 三种情况无太大差别 复杂度计算；多种算法同时使用时 复杂度取最大值即多种算法嵌套使用时 复杂度计算乘积即for循环时间复杂度等于循环次数乘以循环体代码复杂度即 i*o(f(n))if-else结构复杂度取决于 判断条件、分支的复杂度的最大值即 空间复杂度；程序运行时占用内存的大小S(n)=O(f(n)) 一、线性表定义：由同类型数据元素构成有序序列的线性结构/一类形似只需要换数或字符的数据按顺序排列的表例如12x²+1x、-6666x²+457x可以抽象为ax²+bx 这就算同类型了/ 线性表有两种储存方式：顺序与链式顺序表类似于数组 优缺点一致链式表 可动态分配内存 方便插入删除 查找只能顺序遍历 顺序表用数组实现就行了 重点写一下链式表 链式表的示例 123456typedef struct Node *NewData //结构体定义指针 可以用NewData来指向下一个数据元素struct Node{ //自定义数据类型 看不懂的话再学一下上学期的c++ int a; //数据域 设置任意的同类型数据不同的地方 int b; //同 NewData link; //指针域 指向下一个数据节点}","categories":[],"tags":[],"author":"ryongwon"},{"title":"发癫","slug":"poem","date":"2023-03-04T18:23:36.000Z","updated":"2023-04-11T14:48:27.096Z","comments":true,"path":"2023/03/05/poem/","link":"","permalink":"http://example.com/2023/03/05/poem/","excerpt":"为赋新词强说愁","text":"为赋新词强说愁 前途光明我看不见 道路曲折我走不完 考得你昼夜把心血耗，考得你大好青春等闲拋。考得你不分苗和草，考得你手不能提来肩不能挑。考得你头发白牙齿全掉，考得你弓背又驼腰。年年考，月月考，活活考死你这命一条！","categories":[],"tags":[],"author":"ryongwon"},{"title":"test_img","slug":"test-img","date":"2023-03-04T12:27:47.000Z","updated":"2023-03-04T18:15:20.652Z","comments":true,"path":"2023/03/04/test-img/","link":"","permalink":"http://example.com/2023/03/04/test-img/","excerpt":"😅妈的这主题配置这么全上传不了照片？什么啥b操作","text":"😅妈的这主题配置这么全上传不了照片？什么啥b操作 错了哥 我是啥b","categories":[],"tags":[],"author":"ryongwon"},{"title":"markdown基础test","slug":"test","date":"2022-11-08T05:37:51.000Z","updated":"2023-03-15T16:26:36.316Z","comments":true,"path":"2022/11/08/test/","link":"","permalink":"http://example.com/2022/11/08/test/","excerpt":"测试一些没玩过的东西","text":"测试一些没玩过的东西 可莉不知道哦 自带的颜色不好使 一级标题？颗粒也不道啊三级四级别急别急正在玩插件 12345678#include &lt;stdio.h&gt;int main(){ printf(\"Hello World\"); return 0;} 图片插入MD的语法是酱紫的 1![没什么的文字输入](同文件夹下同名文件夹/文件名.jpg) markdown语法总结块内元素标题123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 引用 怎么和学妹说话啊 ————by f0 1&gt;怎么和学妹说话啊 ————by f0 代码块123456#include &lt;iostream&gt;using namespace std;int main(){ return 0} //```[编译语言] //``` 表格 姓名 性别 年龄 联系方式 11 45 14 后面忘了 123|姓名|性别|年龄|联系方式||:-|--:|:---:|:----:||11|45|14|后面忘了| 行内元素视频引用不支持但是url还能用 1&lt;iframe src=\"//player.bilibili.com/player.html?aid=971614142&amp;bvid=BV1Yp4y1p7n2&amp;cid=293544810&amp;page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"&gt; &lt;/iframe&gt; 外链新的网易云外链可以直接用css全部外链都能用","categories":[],"tags":[],"author":"ryongwon"},{"title":"Hello World","slug":"hello-world","date":"2022-11-07T03:12:08.010Z","updated":"2023-03-04T15:56:52.540Z","comments":true,"path":"2022/11/07/hello-world/","link":"","permalink":"http://example.com/2022/11/07/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment 随笔好的 以上都没什么用在它自带的页面下写点感想 有一说一干活是真累啊，本来这个blog初始界面应该在昨天（2022.11.06）就应该做完的。但是！经典的但是转折！这个延迟跟上个世纪村里没有电报一般堪比邮递员送信的网络和只有一个txt文件却让你编出cpp的编译器一样的脑瘫配置。历经有效时间八个小时（大概的，真要说的话可能是六七个小时吧）终于配出来能看的blog页面…我一定要补充一个视频/blog来帮助后面的人碰见这些像派克叔叔做的苹果派一样糟糕的报错和无法进行…整个过程的逻辑性太重要了，治标不治本的解决错误方案只会让人再次遇见错误依然选择百度。参考许多视频和文档，但是文档的记述更让我云里雾里（突然理解了为什么学长学姐们不爱读文献，晦涩难懂的文字记录着未曾了解过的知识犹如对着三岁小孩告诉他任何一个函数如果可导就存在一个多项式可以无限的近似它）。希望能尽可能用白话文（？）和通俗易懂的语言让大家理解整个过程的逻辑链。 现在初始化设置了封面和页脚，但是没有搞懂如何去设置其它零碎部分，例如怎么去字体、怎么字体大小型号、改变字体颜色等等等等。学习之路漫漫其修远啊。建blog可能是来到赛博礼堂干的最应该的事之一了。 //这个文字体量是不是应该单开一篇页面写…一说起字数还有文章主题的字数统计和预估阅读时间没学，做blog也完全就是有样学样，跟着教程复制和粘贴，需要什么现学什么，如同我的pta作业一般。这让我十分佩服诺宝的博客，前后端都自己写，不愧是传说中的#code又好长得又高又帅家里有钱还可以润出去#的jn。 注释打的跟文章主体似的，整篇结构写的乱七八糟，而且还有很多长句。还请凑合看吧… ps：写这段随笔的时候很搞，大心康的一位哥们开麦打mc，乐死，这么一说可以试试搞一下mc服务器整个小服务器玩玩。哦靠我还没学会如何添加图片，应该附图一下。 在学 再学","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://example.com/tags/%E9%9A%8F%E7%AC%94/"}],"author":"ryongwon"}],"categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://example.com/tags/%E9%9A%8F%E7%AC%94/"}]}